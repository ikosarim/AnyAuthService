name: Build and publish artifacts to JFrog Packages

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'debug'
        type: choice
        options:
          - info
          - warning
          - debug

#env:
#  NEW_PATCH_VERSION: $((${{ secrets.PATCH_VERSION }}+1))
#  NEW_PATCH_VERSION: 2
#  BUILD_MINOR_VERSION: ${{ secrets.MINOR_VERSION }}
#  BUILD_MINOR_VERSION: 0
#  BUILD_MAJOR_VERSION: ${{ secrets.MAJOR_VERSION }}
#  BUILD_MAJOR_VERSION: 0

jobs:
  log-the-inputs:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v1

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

#      - name: Show current versions
#        run: |
#          echo "Major version:"
#          echo ${{ secrets.MAJOR_VERSION }} | sed 's/./& /g'
#          echo "Minor version:"
#          echo ${{ secrets.MINOR_VERSION }} | sed 's/./& /g'
#          echo "Patch version:"
#          echo ${{ secrets.PATCH_VERSION }} | sed 's/./& /g'

      - name: Set env variables
        run: |
          echo "BUILD_MAJOR_VERSION=${{ secrets.MAJOR_VERSION }}" >> $GITHUB_ENV
          echo "BUILD_MINOR_VERSION=${{ secrets.MINOR_VERSION }}" >> $GITHUB_ENV
          echo "NEW_PATCH_VERSION=$((${{ secrets.PATCH_VERSION }}+1))" >> $GITHUB_ENV

      - name: Show build versions
        run: |
          echo "Major version:"
          echo ${{ env.BUILD_MAJOR_VERSION }}
          echo "Minor version:"
          echo ${{ env.BUILD_MINOR_VERSION }}
          echo "Patch version:"
          echo ${{ env.NEW_PATCH_VERSION }}

      #      - name: Set new patch version
      #        uses: hmanzur/actions-set-secret@v2.0.0
      #        with:
      #          name: 'PATCH_VERSION'
      #          value: $((${{ secrets.PATCH_VERSION }}+1))
      #          repository: ikosarim/AnyAuthService
      #          token: ${{ secrets.REPO_ACCESS_TOKEN }}

#      - name: Publish maven artifact
#        env:
#          LEVEL: ${{ inputs.logLevel }}
#          SNAPSHOT: ${{ inputs.snapshot }}
#        run: |
#          echo "Log level: $LEVEL"
#          rm -r ~/.m2
#          mkdir ~/.m2
#          mvn versions:set -DnewVersion=${{ env.BUILD_MAJOR_VERSION }}.${{ env.BUILD_MINOR_VERSION}}.${{ env.NEW_PATCH_VERSION }}-SNAPSHOT
#          mvn versions:update-child-modules
#          cat pom.xml
#          mvn -e -B -X deploy --settings anySettings.xml -Dmaven.test.skip=true
#
#      - name: Set up QEMU üèóÔ∏è
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx üêã
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to JFrog üê∏
#        uses: docker/login-action@v1
#        with:
#          registry: idevelopment.jfrog.io
#          username: igor.kosarim@yandex.ru
#          password: Pass_000_worD
#
#      - name: Build and push üê≥
#        id: docker_build
#        uses: docker/build-push-action@v3
#        with:
#          push: true
#          build-args: |
#            maven_build_version=${{ env.BUILD_MAJOR_VERSION }}.${{ env.BUILD_MINOR_VERSION}}.$((${{ secrets.PATCH_VERSION }}+1))-SNAPSHOT
#            maven_build_version_for_image=${{ env.BUILD_MAJOR_VERSION }}.${{ env.BUILD_MINOR_VERSION}}.$((${{ secrets.PATCH_VERSION }}+1))-SNAPSHOT
#          tags: idevelopment.jfrog.io/any-docker-image/any-authenticate-service:${{ env.BUILD_MAJOR_VERSION }}.${{ env.BUILD_MINOR_VERSION}}.${{ env.NEW_PATCH_VERSION }}-SNAPSHOT